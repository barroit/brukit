#!/usr/bin/python3
# SPDX-License-Identifier: GPL-3.0-or-later or MIT

from libkit import *

srctree = env_or_die('SRCTREE')
__dotconfig = env_or_die('DOTCONF')
__depconfig = env_or_die('DEPCONF')

__depdata = open(f"{srctree}/scripts/depconf.1", 'r')
dotconfig = open(env_or_die('DOTCONF'), 'r')
depconfig = open(__depconfig, 'r')

dotconf = { 'y': True }
depconf = { 'y': True }

exec(dotconfig.read(), {}, dotconf)
exec(depconfig.read(), {}, depconf)

depdata = __depdata.read().split('\n')
depdata = [ dep for dep in depdata if dep and dep[0] != '#' ]
changes = 0

for dep in depdata:
	if dep in dotconf:
		if dep in depconf and dotconf[dep] == depconf[dep]:
			continue

		depconf[dep] = dotconf[dep]
	elif dep in depconf:
		del depconf[dep]
	else:
		continue

	changes += 1

if not changes:
	exit(0)

del depconf['y']

depconfig = open(__depconfig, 'r+')

head = f"# Generated by {argv[0]}\n"
head_len = len(head)

if depconfig.tell() == 0:
	depconfig.write(head)
else:
	depconfig.seek(head_len)

for dep in depconf:
	val = dotconf[dep]
	t = type(val)

	if t is bool:
		val = 'y'
	elif t is str:
		val = f"\"{val}\""

	depconfig.write(f"\n{dep}={val}\n")

depconfig.truncate()
