#!/usr/bin/env python3
# SPDX-License-Identifier: GPL-3.0-or-later or MIT

# Requires CC TOP GEN BUILD

import atexit
import multiprocessing as mp

from os import devnull, environ as env, SEEK_END, path, unlink, getpid
from subprocess import run
from sys import argv

cc    = env['CC']
top   = env['TOP']
gen   = env['GEN']
build = env['BUILD']

data_name   = path.join(top,   'scripts', 'cc-feature.def')
cmake_name  = path.join(build, 'features.cmake')
header_name = path.join(gen,   'features.h')

data   = open(data_name,   'r')
cmake  = open(cmake_name,  'w')
header = open(header_name, 'w')

pid = getpid()
tmp = f'.tmp_{pid}.o'

def rmtmp():
	if path.isfile(tmp):
		unlink(tmp)

atexit.register(rmtmp)

cmake.write("""\
# Generated by scripts/cc-feature.py

""")
header.write("""\
/*
 * Generated by scripts/cc-feature.py
 */

""")

def test_feature(name, prog):
	if prog[0] == '\n':
		cmd = [ cc, '-Werror', '-S', '-x', 'c', '-o', devnull, '-' ]
	else:
		cmd  = [ cc, '-Werror', '-c', '-x', 'c', '-o', tmp, devnull ]
		cmd[1:1] = prog.split()

	res = run(cmd, text=True, input=prog, capture_output=True)

	return (name, res.returncode)

def test_feature_cb(rets):
	for name, ret in rets:
		if ret == 0:
			cmake.write(f"set({name} 1)\n")
			header.write(f"#define {name}\n")
		else:
			cmake.write(f"# unset({name})\n")
			header.write(f"/* #undef {name} */\n")

		cmake.write('\n')
		header.write('\n')

	cmake.seek(0, SEEK_END)
	cmake.truncate(cmake.tell() - 1)

	header.seek(0, SEEK_END)
	header.truncate(header.tell() - 1)

# BEGIN	Because Windows fucking sucks.
if __name__ == '__main__':
# END	Because Windows fucking sucks.

	tests = {}

	exec(data.read(), {}, tests)

	pool = mp.Pool(mp.cpu_count() + 1)
	args = [(name, tests[name]) for name in tests]

	pool.starmap_async(test_feature, args, callback = test_feature_cb)

	pool.close()
	pool.join()
