#!/usr/bin/env python3
# SPDX-License-Identifier: GPL-3.0-or-later or MIT

# Requires CC

import multiprocessing as mp
import sys

from os import devnull, environ as env, SEEK_END, path, unlink, getpid
from subprocess import run
from sys import argv

if len(argv) < 3:
	exit(128)

data = open(argv[1], 'r')
dest = open(argv[2], 'w', newline='\n')

cc  = env['CC']
pid = getpid()
tmp = f'.tmp_{pid}.o'

sys.stdout = dest

print("""\
/*
 * Generated by scripts/cc-feature.py
 */
""")

def test_feature(name, prog):
	if prog[0] == '\n':
		cmd = [ cc, '-Werror', '-S', '-x', 'c', '-o', devnull, '-' ]
	else:
		cmd  = [ cc, '-Werror', '-c', '-x', 'c', '-o', tmp, devnull ]
		cmd[1:1] = prog.split()

	res = run(cmd, text=True, input=prog, capture_output=True)

	return (name, res.returncode)

def test_feature_cb(rets):
	for name, ret in rets:
		if ret == 0:
			print(f"#define {name}")
		else:
			print(f"/* #undef {name} */")
		print()

	dest.seek(0, SEEK_END)
	dest.truncate(dest.tell() - 1)

# BEGIN	Because Windows fucking sucks.
if __name__ == '__main__':
# END	Because Windows fucking sucks.

	tests = {}

	exec(data.read(), {}, tests)

	pool = mp.Pool(mp.cpu_count() + 1)
	args = [(name, tests[name]) for name in tests]

	pool.starmap_async(test_feature, args, callback = test_feature_cb)

	pool.close()
	pool.join()

	if path.isfile(tmp):
		unlink(tmp)
